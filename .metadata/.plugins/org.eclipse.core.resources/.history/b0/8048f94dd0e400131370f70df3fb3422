/*
 * CRouter.h
 *
 *  Created on: Dec 31, 2013
 *      Author: root
 */

#ifndef CROUTER_H_
#define CROUTER_H_
#include "BasicIncludes.h"
#include "CConnection.h"
#include "CUIPV4.h"
#include "CPacketCollector.h"
#include "CVirtualConnection.h"
/**
 * Thread Related Inclusions
 */
#include <boost/thread.hpp>
#include <boost/tuple/tuple.hpp>
#include "boost/date_time/posix_time/posix_time.hpp"
#include <boost/signals2/mutex.hpp>
#define DEFAULT_ROUTER_BUFFER_SIZE 100
#define MAX_FILLAGE_RATE 100
#define MAX_DROP_RATE 7
#define MAX_INTERVAL_BETWEEN_FILLAGE_CHANGE 100
class CRouter
{
public:
	/**
	 * Constructor - initializing the members
	 */
	CRouter();

	/**
	 * Deleting the allocated members
	 */
	virtual ~CRouter();

	/**
	 * Add the connections related to the router
	 * @param connection
	 */
	void AddConnection(const CConnection * connection){mConnections.push_back(connection);}

	/**
	 * Add the virtual connections connected to the router
	 * @param connectionList vector of connections
	 */
	void AppendConnectionList(list<CVirtualConnection const *> &connectionList);

	/**
	 * Requests tables from its connections in order to build its routing table
	 */
	void RequestTables();

	/**
	 * Threaded sniffing and packer handling
	 */
	void Sniffer();

	/**
	 * Non threaded emulation functions
	 */
	void nonThreadedSniffer();
	void nonThreadedInit();

	/**
	 * Stopping threads
	 */
	void StopEmulation();

	unsigned int GetBufferSize() const
	{
		return mBufferSize;
	}

	void SetBufferSize(unsigned int bufferSize)
	{
		mBufferSize = bufferSize;
	}

	double GetDropRate() const
	{
		return mDropRate;
	}

	void SetDropRate(double dropRate)
	{
		mDropRate = dropRate;
	}

	unsigned int GetRouterNumber() const
	{
		return mRouterNumber;
	}

	void SetRouterNumber(unsigned int routerNumber)
	{
		mRouterNumber = routerNumber;
	}

	void AddPacketsToBuffer(unsigned int numberOfPackets=0)
	{
		mPacketCollector->AddRandomPackets(numberOfPackets);
	}

	void setRouterThreaded(bool threaded) {mThreaded = threaded;}

	/**
	 * this method determines if the router is comprised out of
	 * virtual connection only
	 * Note: this method uses RTTI so use it in the init only
	 * @return
	 */
	bool isVirtualRouter()
	{
		//check if all connection are virtual =>| this router is virtual
		list<CConnection const *>::iterator it = mConnections.begin();
		CVirtualConnection const * cvc;
		for (;it!=mConnections.end();++it)
		{

			cvc = dynamic_cast<CVirtualConnection const *>(*it);
			if (cvc == NULL) {return false;}
		}
		return true;
	}

	double GetFillage() const
	{
		return mFillage;
	}

	void SetFillage(double fillage)
	{
		mFillage = fillage;
	}

	unsigned int GetInitialBufferUse() const
	{
		return mInitialBufferUse;
	}

	void SetInitialBufferUse(unsigned int initialBufferUse)
	{
		mInitialBufferUse = initialBufferUse;
	}

	void SetDynamicFillageArray(string str)
	{
		std::istringstream in(str);
		double percentage;
		double intervalTime;
		//If no time given the last percentage will not be inserted
		while (in >> percentage && in >> intervalTime)
		{
			if (intervalTime>MAX_INTERVAL_BETWEEN_FILLAGE_CHANGE || intervalTime<0)
			{
				throw(CException("Interval time is too long"));
			}
			if (percentage>=MAX_FILLAGE_RATE || percentage<0)
			{
				throw(CException("Too high fillage percentage"));
			}
			mFillageArr.push_back(pair<unsigned int, unsigned int>(percentage,intervalTime));
		}
	}
	void SetDynamicDropRateArray(string str)
	{
		std::istringstream in(str);
		double dropRate;
		double intervalTime;
		//If no time given the last percentage will not be inserted
		while (in >> dropRate && in >> intervalTime)
		{
			if (intervalTime>MAX_INTERVAL_BETWEEN_FILLAGE_CHANGE || intervalTime<0)
			{
				throw(CException("Interval time is too long"));
			}
			if (dropRate>=MAX_DROP_RATE || dropRate<0)
			{
				throw(CException("Too high drop rate percentage"));
			}
			mDropRateArr.push_back(pair<unsigned int, unsigned int>(dropRate,intervalTime));
		}
	}
private:
	void HandleArp(Packet * pkt);
	void HandleIPv4(Packet * pkt,const double popTime);
	void Sniff();
	void PacketHandler();
	bool ProcessSendPacket(Packet* packet);
	void DynamicFillageHandler();
	void DynamicDropRateHandler();
	list<CConnection const *> mConnections;
	//MAP < IP , <Connection,MAC> >
	map<string,pair<CConnection const*,string> > mRoutingTable;
	unsigned int mBufferSize;
	boost::thread mSniffingThread;
	boost::thread mPacketsHandlingThread;
	CPacketCollector * mPacketCollector;
	double mDropRate;
	unsigned int mRouterNumber;
	bool mThreaded; //determins if the router is threaded or not
	boost::signals2::mutex mMtx;
	double mFillage;
	unsigned int mInitialBufferUse;
	//dynamic fillage handle
	vector< pair< double,double > > mFillageArr;
	vector< pair< double,double > >::iterator mFillageArrIterator;
	//dynamic drop rate
	vector< pair< double,double > > mDropRateArr;
	vector< pair< double,double > >::iterator mDropRateArrIterator;
};

#endif /* CROUTER_H_ */
